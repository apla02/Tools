git init: se crea una area en memoria ram que se llama staging, donde se empiezan a agregar los cambios y 
se crear el repositorio en una carpeta .git, que va almacenando todos los cambios guardados (git add),
se confirman con git commit -m "" , es decir que se va al repositorio
se puede eliminar con git rm


estados:
untrack: sin rastrear
track = se rastreó con git add, pero pendiente de confirmación, dice si hay cambios y se va staging
versión de cambios = se crea con cada commit, se guarda en el repositorio


Rama:
Crear una nueva rama se trata de copiar un commit (de cualquier rama), pasarlo a otro lado (a otra rama) y continuar el trabajo de una parte específica de nuestro proyecto sin afectar el flujo de trabajo principal (que continúa en la rama master o la rama principal).

Los equipos de desarrollo tienen un estándar: Todo lo que esté en la rama master va a producción, las nuevas features, características y experimentos van en una rama “development” (para unirse a master cuando estén definitivamente listas) y los issues o errores se solucionan en una rama “hotfix” para unirse a master tan pronto como sea posible.

 Crear una nueva rama lo conocemos como Checkout. Unir dos ramas lo conocemos como Merge.

Podemos crear todas las ramas y commits que queramos. De hecho, podemos aprovechar el registro de cambios de Git para crear ramas, traer versiones viejas del código, arreglarlas y combinarlas de nuevo para mejorar el proyecto.

Solo ten en cuenta que combinar estas ramas (sí, hacer “merge”) puede generar conflictos. Algunos archivos pueden ser diferentes en ambas ramas. Git es muy inteligente y puede intentar unir estos cambios automáticamente, pero no 



git show: 

esc shift z z


El comando git checkout + ID 
del commit nos permite viajar en el tiempo. 
Podemos volver a cualquier versión anterior de un archivo específico o incluso del proyecto entero.
Esta también es la forma de crear ramas y movernos entre ellas.

También hay una forma de hacerlo un poco más “ruda”: usando el comando git reset. 
En este caso, no solo “volvemos en el tiempo”, sino que borramos los cambios que hicimos después de este
commit.
git reset "ID_COMMIT" --hard
git reset "ID_COMMIT" --soft

git rm

Este comando nos ayuda a eliminar archivos de Git sin eliminar su historial del sistema de versiones. Esto quiere decir que si necesitamos recuperar el archivo solo debemos “viajar en el tiempo” y recuperar el último commit antes de borrar el archivo en cuestión.

Recuerda que git rm no puede usarse así nomás. Debemos usar uno de los flags para indicarle a Git cómo eliminar los archivos que ya no necesitamos en la última versión del proyecto:

    git rm --cached: Elimina los archivos del área de Staging y del próximo commit pero los mantiene en nuestro disco duro.
    git rm --force: Elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro de la existencia de los archivos, de modo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).

git reset

Este comando nos ayuda a volver en el tiempo. Pero no como git checkout que nos deja ir, mirar, pasear y volver. Con git reset volvemos al pasado sin la posibilidad de volver al futuro. Borramos la historia y la debemos sobreescribir. No hay vuelta atrás.

Este comando es muy peligroso y debemos usarlo solo en caso de emergencia. Recuerda que debemos usar alguna de estas dos opciones:

Hay dos formas de usar git reset: con el argumento --hard, borrando toda la información que tengamos en el área de staging (y perdiendo todo para siempre). O, un poco más seguro, con el argumento --soft, que mantiene allí los archivos del área de staging para que podamos aplicar nuestros últimos cambios pero desde un commit anterior.

    git reset --soft: Borramos todo el historial y los registros de Git pero guardamos los cambios que tengamos en Staging, así podemos aplicar las últimas actualizaciones a un nuevo commit.
    git reset --hard: Borra todo. Todo todito, absolutamente todo. Toda la información de los commits y del área de staging se borra del historial.

¡Pero todavía falta algo!

    git reset HEAD: Este es el comando para sacar archivos del área de Staging. No para borrarlos ni nada de eso, solo para que los últimos cambios de estos archivos no se envíen al último commit, a menos que cambiemos de opinión y los incluyamos de nuevo en staging con git add, por supuesto.

¿Por qué esto es importante?

Imagina el siguiente caso:

Hacemos cambios en los archivos de un proyecto para una nueva actualización. Todos los archivos con cambios se mueven al área de staging con el comando git add. Pero te das cuenta de que uno de esos archivos no está listo todavía. Actualizaste el archivo pero ese cambio no debe ir en el próximo commit por ahora.

¿Qué podemos hacer?

Bueno, todos los cambios están en el área de Staging, incluido el archivo con los cambios que no están listos. Esto significa que debemos sacar ese archivo de Staging para poder hacer commit de todos los demás.

¡Al usar git rm lo que haremos será eliminar este archivo completamente de git! Todavía tendremos el historial de cambios de este archivo, con la eliminación del archivo como su última actualización. Recuerda que en este caso no buscábamos eliminar un archivo, solo dejarlo como estaba y actualizarlo después, no en este commit.

En cambio, si usamos git reset HEAD, lo único que haremos será mover estos cambios de Staging a Unstaged. Seguiremos teniendo los últimos cambios del archivo, el repositorio mantendrá el archivo (no con sus últimos cambios pero sí con los últimos en los que hicimos commit) y no habremos perdido nada.

Conclusión: Lo mejor que puedes hacer para salvar tu puesto y evitar un incendio en tu trabajo es conocer muy bien la diferencia y los riesgos de todos los comandos de Git.


    git log --oneline - Te muestra el id commit y el título del commit.
    git log --decorate- Te muestra donde se encuentra el head point en el log.
    git log --stat - Explica el número de líneas que se cambiaron brevemente.
    git log -p- Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.
    git shortlog - Indica que commits ha realizado un usuario, mostrando el usuario y el titulo de sus commits.
    git log --graph --oneline --decorate y
    git log --pretty=format:"%cn hizo un commit %h el dia %cd" - Muestra mensajes personalizados de los commits.
    git log -3 - Limitamos el número de commits.
    git log --after=“2018-1-2” ,
    git log --after=“today” y
    git log --after=“2018-1-2” --before=“today” - Commits para localizar por fechas.
    git log --author=“Name Author” - Commits realizados por autor que cumplan exactamente con el nombre.
    git log --grep=“INVIE” - Busca los commits que cumplan tal cual está escrito entre las comillas.
    git log --grep=“INVIE” –i- Busca los commits que cumplan sin importar mayúsculas o minúsculas.
    git log – index.html- Busca los commits en un archivo en específico.
    git log -S “Por contenido”- Buscar los commits con el contenido dentro del archivo.
    git log > log.txt - guardar los logs en un archivo txt



    git clone url_del_servidor_remoto: Nos permite descargar los archivos de la última versión de la rama principal y todo el historial de cambios en la carpeta .git.
    git push: Luego de hacer git add y git commit debemos ejecutar este comando para mandar los cambios al servidor remoto.
    git fetch: Lo usamos para traer actualizaciones del servidor remoto y guardarlas en nuestro repositorio local (en caso de que hayan, por supuesto).
    git merge: También usamos el comando git merge con servidores remotos. Lo necesitamos para combinar los últimos cambios del servidor remoto y nuestro directorio de trabajo.
    git pull: Básicamente, git fetch y git merge al mismo tiempo.


    Las ramas son la forma de hacer cambios en nuestro proyecto sin afectar el flujo de trabajo de la rama principal. Esto porque queremos trabajar una parte muy específica de 
    la aplicación o simplemente experimentar.

    La cabecera o HEAD representan la rama y el commit de esa rama donde estamos trabajando. Por defecto, esta cabecera aparecerá en el último commit de nuestra rama principal. 
    Pero podemos cambiarlo al crear una rama (git branch rama, git checkout -b rama) o movernos en el tiempo a cualquier otro commit de cualquier otra rama con los comandos 
    (git reset id-commit, git checkout rama-o-id-commit).

    git merge "branch" desde la rama main


    # Primero: Guardar la URL del repositorio de GitHub
    # con el nombre de origin
    git remote add origin URL

    # Segundo: Verificar que la URL se haya guardado
    # correctamente:
    git remote
    git remote -v

    # Tercero: Traer la versión del repositorio remoto y
    # hacer merge para crear un commit con los archivos
    # de ambas partes. Podemos usar git fetch y git merge
    # o solo el git pull con el flag --allow-unrelated-histories:
    git pull origin master --allow-unrelated-histories

    # Por último, ahora sí podemos hacer git push para guardar
    # los cambios de nuestro repositorio local en GitHub:
    git push origin master


    crear llave publica-privada para GitHub
     ssh-keygen -t rsa -b 4096 -C "1873@holbertonschool.com"

     HazmeUnPullRequest

    hacer FORK de hyperblog
    en blogpost.html
    Dentro del ID “post” luego de “suscribete y dale like” agrega otra línea o párrafo con tu nombre o tu nombre de usuario en Platzi.
    hacer add, commit, push
    hacer un pull request
    Esperar :v

